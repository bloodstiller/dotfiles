#+title: NixOS System Configuration
#+property: header-args:nix :tangle configuration.nix
#+auto_tangle: t

* NixOS System Configuration
This is my NixOS system configuration file that defines system-wide settings and services. This is a literate configuration file that utlizes emacs for editing.

** Basic System Configuration
Basic system setup including imports and bootloader configuration.

#+begin_src nix
{ config, pkgs, ... }:

let
  # Use unstable channel
  unstable = import <nixos-unstable> { config = config.nixpkgs.config; };
in
{
  imports = [ 
    # Include the results of the hardware scan
    ./hardware-configuration.nix
    "${builtins.fetchTarball "https://github.com/ryantm/agenix/archive/main.tar.gz"}/modules/age.nix"
  ];

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;
#+end_src

** Boot Configuration
Bootloader and disk encryption settings.

#+begin_src nix
  # Bootloader Configuration
  boot = {
    loader = {
      grub = {
        enable = true;
        device = "/dev/sda";
        useOSProber = true;
        enableCryptodisk = true;
      };
    };
    
    # Disk Encryption
    initrd = {
      secrets = {
        "/boot/crypto_keyfile.bin" = null;
      };
      luks.devices."luks-e29431c5-61b9-42a8-9ad3-878f8bc2889f".keyFile = "/boot/crypto_keyfile.bin";
    };

    # AppImage Support
    programs.appimage.enable = true;
    programs.appimage.binfmt = true;

    binfmt.registrations.appimage = {
      wrapInterpreterInShell = false;
      interpreter = "${pkgs.appimage-run}/bin/appimage-run";
      recognitionType = "magic";
      offset = 0;
      mask = ''\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'';
      magicOrExtension = ''\x7fELF....AI\x02'';
    };
  };
#+end_src

** Network Configuration
Network and hostname settings.

#+begin_src nix
  # Network Configuration
  networking = {
    hostName = "nixos";
    networkmanager.enable = true;
    # wireless.enable = true;  # Enables wireless support via wpa_supplicant
  };
#+end_src

** Localization
Time zone and locale settings.

#+begin_src nix
  # Time and Locale Settings
  time.timeZone = "Europe/London";

  # Locale Configuration
  i18n = {
    defaultLocale = "en_GB.UTF-8";
    extraLocaleSettings = {
      LC_ADDRESS = "en_GB.UTF-8";
      LC_IDENTIFICATION = "en_GB.UTF-8";
      LC_MEASUREMENT = "en_GB.UTF-8";
      LC_MONETARY = "en_GB.UTF-8";
      LC_NAME = "en_GB.UTF-8";
      LC_NUMERIC = "en_GB.UTF-8";
      LC_PAPER = "en_GB.UTF-8";
      LC_TELEPHONE = "en_GB.UTF-8";
      LC_TIME = "en_GB.UTF-8";
    };
  };

  # Console Configuration
  console.keyMap = "uk";
#+end_src

** Desktop Environment
X11, display manager, and desktop environment configuration.

#+begin_src nix
  # X11 and Display Configuration
  services.xserver = {
    enable = true;
    
    # Display Manager
    displayManager = {
      lightdm.enable = true;
    };

    # Desktop Environment
    desktopManager = {
      xfce.enable = true;
      gnome.enable = false;
    };
    
    # Keyboard Layout
    xkb = {
      layout = "gb";
      variant = "";
    };
  };

  # Default Session
  services.displayManager.defaultSession = "xfce";

  # Remote Desktop
  services.xrdp = {
    enable = true;
    defaultWindowManager = "startxfce4";
    openFirewall = true;
  };
#+end_src

** Audio Configuration
Sound system configuration using PipeWire.

#+begin_src nix
  # Audio Configuration
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # jack.enable = true;  # Uncomment for JACK support
  };
  services.pulseaudio.enable = false;
#+end_src

** User Configuration
User account settings and shell configuration.

#+begin_src nix
  # Shell Configuration
  programs.zsh.enable = true;
  users.defaultUserShell = pkgs.zsh;

  # User Account
  users.users.martin = {
    isNormalUser = true;
    description = "martin";
    extraGroups = [ "networkmanager" "wheel" "docker" "ssl-cert" "libvirtd" "kvm" ];
    useDefaultShell = true;
    packages = with pkgs; [
      (pkgs.callPackage "${builtins.fetchTarball "https://github.com/ryantm/agenix/archive/main.tar.gz"}/pkgs/agenix.nix" {})
    ];
    openssh.authorizedKeys.keys = [
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOg2VKzAytPvs9aArki7JPDyOLjn6+/soebm7JJdNQ5x martin@Lok"
    ];
  };
#+end_src

** System Packages
Core system packages and services.

#+begin_src nix
  # System Packages
  environment.systemPackages = with pkgs; [
    # Core Utilities
    vim
    wget
    git
    
    # File System Tools
    nfs-utils
    rsync
    acl
    
    # Desktop Environment
    kitty
    xdg-desktop-portal
    xdg-desktop-portal-hyprland
    xdg-desktop-portal-gtk
    
    # XFCE Plugins
    xfce.thunar
    xfce.xfce4-whiskermenu-plugin
    xfce.xfce4-pulseaudio-plugin
  ];
#+end_src

** System Services
Various system services including SSH, virtualization, and file systems.

#+begin_src nix
  # SSH Configuration
  services.openssh = {
    enable = true;
    hostKeys = [
      {
        path = "/etc/ssh/ssh_host_ed25519_key";
        type = "ed25519";
      }
    ];
  };

  # Virtualization
  virtualisation = {
    docker.enable = true;
    libvirtd = {
      enable = true;
      qemu = {
        swtpm.enable = true;
        ovmf.enable = true;
      };
    };
  };

  # XDG Portal Configuration
  xdg.portal = {
    enable = true;
    wlr.enable = true;
    extraPortals = with pkgs; [
      xdg-desktop-portal-hyprland
    ];
    config = {
      common.default = ["hyprland"];
      hyprland.default = ["hyprland"];
    };
  };

  # Hyprland
  programs.hyprland = {
    enable = true;
    xwayland.enable = true;
  };

  # DBus
  services.dbus.enable = true;
#+end_src

** File Systems
Mount points and NFS configuration.

#+begin_src nix
  # Mount Points
  systemd.tmpfiles.rules = [
    "d /mnt 0755 root root -"
    "d /mnt/media 0755 martin martin -"
    "d /mnt/media/downloads 0755 martin martin -"
    "d /mnt/media/movies 0755 martin martin -"
    "d /mnt/media/tv 0755 martin martin -"
    "d /mnt/media/music 0755 martin martin -"
  ];

  # ACL Configuration
  system.activationScripts.mediaPermissions = {
    deps = [ "users" "groups" ];
    text = let
      setfacl = "${pkgs.acl}/bin/setfacl";
    in ''
      echo "Setting up permissions for /mnt and /mnt/media"
      ${setfacl} -m u:martin:rwx /mnt
      ${setfacl} -m u:martin:rwx /mnt/media
      ${setfacl} -R -m u:martin:rwx /mnt/media/*
      ${setfacl} -R -d -m u:martin:rwx /mnt/media/*
    '';
  };

  # NFS Mounts
  fileSystems = {
    "/mnt/media/downloads" = {
      device = "192.168.2.12:/mnt/MasterPool/Media/Downloads";
      fsType = "nfs";
      options = [ "defaults" "_netdev" "user" "nofail" ];
    };

    "/mnt/media/movies" = {
      device = "192.168.2.12:/mnt/MasterPool/Media/Movies";
      fsType = "nfs";
      options = [ "defaults" "_netdev" "user" "nofail" ];
    };

    "/mnt/media/tv" = {
      device = "192.168.2.12:/mnt/MasterPool/Media/TV";
      fsType = "nfs";
      options = [ "defaults" "_netdev" "user" "nofail" ];
    };

    "/mnt/media/music" = {
      device = "192.168.2.12:/mnt/MasterPool/Media/Music";
      fsType = "nfs";
      options = [ "defaults" "_netdev" "user" "nofail" ];
    };
  };
#+end_src

** Font Configuration
System-wide font settings.

#+begin_src nix
  # Font Configuration
  fonts = {
    fontDir.enable = true;
    enableDefaultPackages = true;
    packages = with pkgs; [
      nerd-fonts.fira-code
      nerd-fonts.jetbrains-mono
      nerd-fonts.iosevka
    ];
  };
#+end_src

** System State
System state version and environment variables.

#+begin_src nix
  # System State Version
  system.stateVersion = "25.05";

  # Environment Variables
  environment.sessionVariables = {
    NIXOS_OZONE_WL = "1";  # Hint Electron apps to use Wayland
    NIXOS_XDG_OPEN_USE_PORTAL = "1";
  };
}
#+end_src 